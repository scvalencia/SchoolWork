// -----------------------
// Sebastián Valencia
// UNIVERSIDAD DE LOS ANDES
// -----------------------
@SuppressWarnings("types")
using gold.**
procedure main(args:String[]) begin
	//GAutomataFrame.show(createTransducer())
	testTransducer(createTransducer())
end

procedure testTransducer(M:ITransducer) begin
	var sc:java.util.Scanner(System.$in)
	while true do
		print "----------------------------"
		print "Digite la cadena de entrada:"
		string:=sc.nextLine()
		result:=M.acceptsString(string)
		print "La cadena fue "+(result?"aceptada":"rechazada")+". Resultado:"
		print M.getOutputString()
		
	end
end

function createTransducer():ITransducer begin
	Q := {'I'} ∪ { ⟨0,y⟩ | y ∈ ('a'‥'z')} ∪ {⟨x,y⟩ | x ∈ ('a'‥'z'), y ∈ ('a'‥'z')} 
	Σ := ('a'‥'z') ∪ {'*', '-'} ∪ {' '}
	Σ´ := ('a'‥'z') ∪ {' '}
	q₀ := 'I'
	F := {'I'}
	return GDeterministicTransducer(Q,Σ,Σ´,q₀,F,δ,g,h)
end

function δ(q,σ) begin
	if σ = ' ' then return 'I' end 
	if σ = '*' or σ = '-' then return q end
	if q = 'I' then return ⟨0,σ⟩ end
end

function δ(⟨x,y⟩,σ) begin
	if σ = ' ' then return 'I'
	elseif x = 0 and (σ = '*' or σ = '-') then return ⟨x,y⟩		
	elseif x = 0 then return ⟨y,σ⟩
	else return ⟨x,y⟩ end
end

function g(q) begin // Respuesta en estado
	return λ
end

function h(q,σ) begin // Respuesta en transición
	if σ = ' ' then return λ end 
	if σ = '*' or σ = '-' then return λ end
	if q = 'I' then return σ end
end

function h(⟨x,y⟩,σ) begin // Respuesta en transición
	if σ = ' ' then return ' '
	elseif x = 0 and (σ = '*' or σ = '-') then return λ		
	elseif x = 0 then return σ
	else
		if x = y then
			if σ = '*' then return x
			elseif σ = '-' then return λ	
			else return σ
			end
		else
			if σ = '*' then return x
			elseif σ = '-' then return y	
			else return σ
			end
		end 
	end
end