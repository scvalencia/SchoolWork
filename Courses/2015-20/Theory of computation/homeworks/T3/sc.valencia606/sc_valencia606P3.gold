// -----------------------
// Sebastián Valencia
// UNIVERSIDAD DE LOS ANDES
// -----------------------
@SuppressWarnings("types")
using gold.**
procedure main(args:String[]) begin
	//GAutomataFrame.show(createTransducer())
	testTransducer(createTransducer())
end

procedure testTransducer(M:ITransducer) begin
	var sc:java.util.Scanner(System.$in)
	while true do
		print "----------------------------"
		print "Digite la cadena de entrada:"
		string:=sc.nextLine()
		result:=M.acceptsString(string)
		print "La cadena fue "+(result?"aceptada":"rechazada")+". Resultado:"
		print M.getOutputString()
		
	end
end

function createTransducer():ITransducer begin
	Q := {'I'} ∪ { ⟨x,0⟩ | x ∈ (0‥9)} ∪ { ⟨x,1⟩ | x ∈ (0‥9)} ∪ {'$'} 
	Σ := ('0'‥'9') ∪ {'$'}
	Σ´ := ('0'‥'9')
	q₀ := 'I'
	F := {'$'}
	return GDeterministicTransducer(Q,Σ,Σ´,q₀,F,δ,g,h)
end

function δ(q,σ) begin
	if σ = '$' then return '$' end
	if q = 'I' then return ⟨0,0⟩
	elseif q = '$' then return '$'
	end
end

function δ(⟨x,y⟩,σ) begin
	if σ = '$' then return '$' end
	if y = 0 then
		if (Integer.parseInt(σ) + ((x + 1) mod 10)) < 10 then
			return ⟨(x + 1) mod 10, 0⟩
		else
			return ⟨(x + 1) mod 10, 1⟩
		end
	elseif y = 1 then
		if (Integer.parseInt(σ) + 1 + ((x + 1) mod 10)) < 10 then
			return ⟨(x + 1) mod 10, 0⟩
		else
			return ⟨(x + 1) mod 10, 1⟩
		end
	end
end

function g(q) begin // Respuesta en estado
	return λ
end

function h(q,σ) begin // Respuesta en transición
	if σ = '$' then return λ
	elseif q = '$' then return λ
	elseif q = 'I' then return σ
	end	
end

function h(⟨x,y⟩,σ) begin // Respuesta en transición
	if σ = '$' then return λ end
	if y = 0 then
		return (Integer.parseInt(σ) + ((x + 1) mod 10)) mod 10
	elseif y = 1 then
		return (1 + Integer.parseInt(σ) + ((x + 1) mod 10)) mod 10
	end	
end
